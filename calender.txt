<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academic Calendar</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        table { width: 90%; margin: 20px auto; border-collapse: collapse; }
        th, td { border: 1px solid black; padding: 10px; text-align: center; }
        th { background-color: #f2f2f2; }
        .month-row { font-weight: bold; background-color: lightblue; text-align: center; }
        .holiday { background-color: red; color: white; }
        .empty { background-color: #f9f9f9; }
        .buttons { margin-top: 20px; }
        .buttons button { margin: 5px; padding: 10px 20px; font-size: 16px; }
    </style>
    <!-- Include SheetJS for Excel export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- Include jsPDF for PDF export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
</head>
<body>  

    <h2>Academic Calendar</h2>

    <form onsubmit="generateTable(); return false;">
        <label>Academic Start Date:</label>
        <input type="date" id="startDate" value="2024-06-01" required>

        <label>Academic End Date:</label>
        <input type="date" id="endDate" value="2025-05-31" required>

        <br><br>

        <label>Dussehra Start Date:</label>
        <input type="date" id="dussehraStart" value="2024-10-10">
        
        <label>Dussehra End Date:</label>
        <input type="date" id="dussehraEnd" value="2024-10-14">

        <br><br>

        <label>Pongal Start Date:</label>
        <input type="date" id="pongalStart" value="2025-01-13">
        
        <label>Pongal End Date:</label>
        <input type="date" id="pongalEnd" value="2025-01-16">

        <br><br>

        <label>Other Local Holidays (DD/MM/YYYY, comma-separated):</label>
        <input type="text" id="localHolidays" value="15/08/2024,02/10/2024,01/01/2025,26/01/2025">

        <br><br>
        <button type="submit">Generate Calendar</button>
    </form>

    <table id="calendar">
        <thead>
            <tr>
                <th>Week No</th>
                <th>Working Days</th>
                <th>Sunday</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <div class="buttons">
        <button onclick="countWorkingDays()">Count Working Days</button>
        <button onclick="downloadExcel()">Download as Excel (.xlsx)</button>
        <button onclick="downloadPDF()">Download as PDF</button>
    </div>

    <script>
        function generateTable() {
            const startDate = new Date(document.getElementById("startDate").value);
            const endDate = new Date(document.getElementById("endDate").value);

            const dussehraStart = new Date(document.getElementById("dussehraStart").value);
            const dussehraEnd = new Date(document.getElementById("dussehraEnd").value);
            const pongalStart = new Date(document.getElementById("pongalStart").value);
            const pongalEnd = new Date(document.getElementById("pongalEnd").value);

            const localHolidays = getHolidayDates("localHolidays");

            const allHolidays = new Set([...localHolidays]);
            addDateRangeToSet(dussehraStart, dussehraEnd, allHolidays);
            addDateRangeToSet(pongalStart, pongalEnd, allHolidays);

            const tableBody = document.querySelector("#calendar tbody");
            tableBody.innerHTML = "";

            let currentDate = new Date(startDate);
            let currentMonth = currentDate.getMonth();
            let firstDayOfWeek = currentDate.getDay();
            let weekNo = 1;

            let monthRow = document.createElement("tr");
            let monthCell = document.createElement("td");
            monthCell.colSpan = 9;
            monthCell.textContent = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });
            monthCell.classList.add("month-row");
            monthRow.appendChild(monthCell);
            tableBody.appendChild(monthRow);

            let row = document.createElement("tr");
            let weekCell = document.createElement("td");
            weekCell.textContent = weekNo;
            row.appendChild(weekCell);

            let workingDaysCell = document.createElement("td");
            let workingDaysCount = 0;
            row.appendChild(workingDaysCell);

            for (let i = 0; i < firstDayOfWeek; i++) {
                let emptyCell = document.createElement("td");
                emptyCell.classList.add("empty");
                row.appendChild(emptyCell);
            }

            let hasDatesInWeek = false;

            while (currentDate <= endDate) {
                let dayOfWeek = currentDate.getDay();
                let dateKey = formatDate(currentDate);

                if (currentDate.getDate() === 1 && currentDate.getMonth() !== currentMonth) {
                    workingDaysCell.textContent = workingDaysCount;
                    tableBody.appendChild(row);

                    row = document.createElement("tr");

                    let newMonthRow = document.createElement("tr");
                    let newMonthCell = document.createElement("td");
                    newMonthCell.colSpan = 9;
                    newMonthCell.textContent = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });
                    newMonthCell.classList.add("month-row");
                    newMonthRow.appendChild(newMonthCell);
                    tableBody.appendChild(newMonthRow);

                    if (!hasDatesInWeek) {
                        weekNo--;
                    }

                    weekNo++;
                    weekCell = document.createElement("td");
                    weekCell.textContent = weekNo;
                    row.appendChild(weekCell);

                    workingDaysCell = document.createElement("td");
                    workingDaysCount = 0;
                    row.appendChild(workingDaysCell);

                    let newMonthStartDay = currentDate.getDay();
                    for (let i = 0; i < newMonthStartDay; i++) {
                        let emptyCell = document.createElement("td");
                        emptyCell.classList.add("empty");
                        row.appendChild(emptyCell);
                    }

                    currentMonth = currentDate.getMonth();
                    hasDatesInWeek = false;
                }

                let cell = document.createElement("td");
                cell.textContent = currentDate.getDate();

                if (allHolidays.has(dateKey) || dayOfWeek === 0 || isSecondSaturday(currentDate)) {
                    cell.classList.add("holiday");
                } else {
                    workingDaysCount++;
                }

                row.appendChild(cell);
                hasDatesInWeek = true;

                if (dayOfWeek === 6) {
                    workingDaysCell.textContent = workingDaysCount;
                    tableBody.appendChild(row);

                    if (!hasDatesInWeek) {
                        weekNo--;
                    }

                    weekNo++;
                    row = document.createElement("tr");
                    weekCell = document.createElement("td");
                    weekCell.textContent = weekNo;
                    row.appendChild(weekCell);

                    workingDaysCell = document.createElement("td");
                    workingDaysCount = 0;
                    row.appendChild(workingDaysCell);

                    hasDatesInWeek = false;
                }

                currentDate.setDate(currentDate.getDate() + 1);
            }

            workingDaysCell.textContent = workingDaysCount;
            tableBody.appendChild(row);
        }

        function getHolidayDates(inputId) {
            let input = document.getElementById(inputId).value;
            return new Set(input.split(',').map(date => date.trim()).filter(date => date !== ""));
        }

        function addDateRangeToSet(start, end, set) {
            while (start <= end) {
                set.add(formatDate(start));
                start.setDate(start.getDate() + 1);
            }
        }

        function isSecondSaturday(date) {
            return date.getDay() === 6 && Math.ceil(date.getDate() / 7) === 2;
        }

        function formatDate(date) {
            return date.toLocaleDateString('en-GB').split('/').join('/');
        }

        // Function to count total working days
        function countWorkingDays() {
            const workingDaysCells = document.querySelectorAll("#calendar tbody td:nth-child(2)");
            let totalWorkingDays = 0;
            workingDaysCells.forEach(cell => {
                totalWorkingDays += parseInt(cell.textContent) || 0;
            });
            alert(`Total Working Days: ${totalWorkingDays}`);
        }

        // Function to download the table as Excel (.xlsx)
        function downloadExcel() {
            const table = document.getElementById("calendar");
            const workbook = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
            XLSX.writeFile(workbook, "Academic_Calendar.xlsx");
        }

        // Function to download the table as PDF
        function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF("landscape"); // Set PDF to landscape mode for better fit

            // Extract table data with styles
            const table = document.getElementById("calendar");
            const rows = table.querySelectorAll("tr");
            const data = [];
            const styles = [];

            rows.forEach((row, rowIndex) => {
                const rowData = [];
                const rowStyles = [];
                row.querySelectorAll("th, td").forEach((cell, colIndex) => {
                    rowData.push(cell.textContent);

                    // Apply styles based on cell classes
                    if (cell.classList.contains("month-row")) {
                        rowStyles.push({ fillColor: [173, 216, 230], textColor: [0, 0, 0] }); // Light blue for month rows
                    } else if (cell.classList.contains("holiday")) {
                        rowStyles.push({ fillColor: [255, 0, 0], textColor: [255, 255, 255] }); // Red for holidays
                    } else if (cell.classList.contains("empty")) {
                        rowStyles.push({ fillColor: [249, 249, 249], textColor: [0, 0, 0] }); // Light gray for empty cells
                    } else {
                        rowStyles.push({ fillColor: [255, 255, 255], textColor: [0, 0, 0] }); // Default style
                    }
                });
                data.push(rowData);
                styles.push(rowStyles);
            });

            // Add table to PDF with custom styles
            doc.autoTable({
                head: [data[0]], // Header row
                body: data.slice(1), // Body rows
                styles: { fontSize: 8, cellPadding: 2 }, // Smaller font size and padding for better fit
                headStyles: { fillColor: [242, 242, 242], textColor: [0, 0, 0] }, // Light gray for header
                bodyStyles: styles.slice(1), // Apply custom styles to body
                margin: { top: 10 }, // Smaller margin for better fit
                tableWidth: "auto", // Auto-adjust table width to fit A4
            });

            // Save the PDF
            doc.save("Academic_Calendar.pdf");
        }
    </script>

</body>
</html>